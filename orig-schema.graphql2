#type CardPrices {
#  id: String
#  uuid: String!
#  format: String!
#  provider: String!
#  currency: String
#  date: String!
#
#  # Card types can be foil & normal
#  cardType: String!
#
#  # Buylist or Retail
#  listType: String!
#  price: Float!
#}
#
#type Deck {
#  id: String!
#
#  # Set code for the deck
#  code: String
#
#  # The cards in the main-board. See the Card data model
#  mainBoard: [Card!]
#
#  # Name of the deck
#  name: String
#
#  # The cards in the side-board. See the Card data model
#  sideBoard: [Card!]
#
#  # Release date in ISO 8601 format for the set. Returns null if the set was not formally released as a product.
#  releaseDate: String
#
#  # The type of deck
#  type: String
#}

#type ForeignData {
#  # Name on the face of the card
#  faceName: String
#
#  # Flavor text in foreign language
#  flavorText: String
#
#  # Foreign language of card
#  language: String!
#
#  # Multiverse ID of the card
#  multiverseId: String
#
#  # Name of the card in foreign language
#  name: String
#
#  # Text ruling of the card in foreign language
#  text: String
#
#  # Type of the card. Includes any supertypes and subtypes
#  type: String
#}

#type Identifier {
#  # The Card Kingdom card foil ID
#  cardKingdomFoilId: String
#
#  # The Card Kingdom card ID
#  cardKingdomId: String
#
#  # The Card Market card ID
#  mcmId: String
#
#  # The Card Market card meta ID
#  mcmMetaId: String
#
#  # The Magic: The Gathering Arena card ID
#  mtgArenaId: String
#
#  # The Magic: The Gathering Online card foil ID
#  mtgoFoilId: String
#
#  # The Magic: The Gathering Online card ID
#  mtgoId: String
#
#  # A universal unique ID generated by MTGJSON. Each entry is unique. Entries are for MTGJSON v4 uuid generation
#  mtgjsonV4Id: String!
#
#  # An string cards have which Wizards of the Coast uses as a card identifier
#  multiverseId: String
#
#  # A universal unique ID generated by Scryfall. Note that cards with multiple faces are not unique
#  scryfallId: String!
#
#  # A unique ID for this card's oracle identity. This value is consistent across reprinted card editions, and unique among different cards with the same name (tokens, Unstable variants, etc)
#  scryfallOracleId: String
#
#  # A unique identifier for the card artwork that remains consistent across reprints. Newly spoiled cards may not have this field yet
#  scryfallIllustrationId: String
#
#  # The TCG Player card ID
#  tcgplayerProductId: String
#}

#type LeadershipSkills {
#  # If this card can be your commander in the Brawl format
#  brawl: Boolean
#
#  # If this card can be your commander in the Commander/EDH format
#  commander: Boolean
#
#  # If this card can be your commander in the Oathbreaker format
#  oathbreaker: Boolean
#}

#type Legalities {
#  format: LegalitiesFormat
#  status: String
#  uuid: Card
#}
#
#enum LegalitiesFormat {
#  BRAWL
#  COMMANDER
#  DUEL
#  FUTURE
#  FRONTIER
#  LEGACY
#  MODERN
#  PAUPER
#  PENNY
#  PIONEER
#  STANDARD
#  VINTAGE
#}

#type PurchaseUrls {
#  # URL to purchase a product on Card Kingdom
#  cardKingdom: String
#
#  # URL to purchase a foil product on Card Kingdom
#  cardKingdomFoil: String
#
#  # URL to purchase a product on Cardmarket
#  cardmarket: String
#
#  # URL to purchase a product on TCG Player
#  tcgplayer: String
#}

#type Rulings {
#  # Release date in ISO 8601 format for the rule
#  date: String
#
#  # Text ruling of the card
#  text: String
#}

#type CardToken {
#  # Name of the artist that illustrated the card art
#  artist: String
#
#  # The ASCII (Basic/128) code formatted card name with no special unicode characters
#  asciiName: String
#
#  # List of the card's available printing types
#  availability: [String!]
#
#  # Color of the card border
#  borderColor: String
#
#  # List of the colors found in manaCost, colorIndicator, and text
#  colorIdentity: [String!]
#
#  # List of all the colors in the color indicator (The symbol prefixed to a card's types)
#  colorIndicator: [String!]
#
#  # List of all colors in manaCost, colorIndicator. Some cards may not have a value, such as cards with 'Devoid' in its text
#  colors: [String!]
#
#  # Card rank on EDHRec
#  edhrecRank: Float
#
#  # Name on the face of the card
#  faceName: String
#
#  # Italicized text found below the rules text that has no game function
#  flavorText: String
#
#  # The visual frame effect
#  frameEffects: [String!]
#
#  # Version of the card frame style
#  frameVersion: String
#
#  # If the card be found in foil
#  hasFoil: Boolean
#
#  # If the card can be found in non-foil
#  hasNonFoil: Boolean
#  identifiers: Identifier
#
#  # If the card has full artwork
#  isFullArt: Boolean
#
#  # If the card is only available in Magic: The Gathering Online
#  isOnlineOnly: Boolean
#
#  # If the card is promotional
#  isPromo: Boolean
#
#  # If the card has been reprinted
#  isReprint: Boolean
#
#  # All keywords found on a card
#  keywords: [String!]
#
#  # Type of card layout
#  layout: String
#
#  # Planeswalker loyalty value
#  loyalty: String
#
#  # Names of each face on the card. Card with multiple faces, like 'Split' and 'Meld' cards are given as delimiter. Example: Face 1 Name // Face 2 Name
#  name: String
#
#  # Number of the card. Can be prefixed or suffixed with a * or other characters for promo sets
#  number: String
#
#  # Power of the card
#  power: String
#
#  # List of promotional types for a card
#  promoTypes: [String!]
#
#  # The names of the cards that product this card
#  reverseRelated: [String!]
#
#  # The set code that the card is from
#  setCode: String
#
#  # Identifier of the card side. Used on cards with multiple faces
#  side: String
#
#  # List of card subtypes found after em-dash
#  subTypes: [String!]
#
#  # Rules text of the card
#  text: String
#
#  # Toughness of the card
#  toughness: String
#
#  # Type of the card as visible, including any supertypes and subtypes
#  type: String
#
#  # List of all 'card types' of the card, including Un-sets and gameplay variants
#  types: [String!]
#
#  # A universal unique ID (v5) generated by MTGJSON. Each entry is unique
#  uuid: String!
#
#  # Name of the watermark on the card
#  watermark: String
#}
#
#type Translations {
#  AncientGreek: String
#  Arabic: String
#  ChineseSimplified: String
#  ChineseTraditional: String
#  French: String
#  German: String
#  Hebrew: String
#  Italian: String
#  Japanese: String
#  Korean: String
#  Latin: String
#  Phyrexian: String
#  PortugueseBrazil: String
#  Russian: String
#  Sanskrit: String
#  Spanish: String
#}

#type Set {
#  id: String!
#
#  # Number of cards in the set. Will default to totalSetSize if not available. Note that Wizards sometimes prints extra cards beyond the set size into promos or supplemental products.
#  baseSetSize: Float
#
#  # Block name the set was in
#  block: String
#
#  # List of cards in this set. See the Card data model
#  cards: [Card!]
#
#  # Set code for the set
#  code: String
#
#  # Alternate set code Wizards uses for a select few duel deck sets.
#  codeV3: String
#
#  # If this set is available only outside the United States
#  isForeignOnly: Boolean
#
#  # If this set is only available in foil
#  isFoilOnly: Boolean
#
#  # If this set is only available in non-foil
#  isNonFoilOnly: Boolean
#
#  # If this set is only available in Magic: The Gathering Online
#  isOnlineOnly: Boolean
#
#  # If this set is only available in paper
#  isPaperOnly: Boolean
#
#  # If this set is still in preview (spoiled). Preview sets do not have complete data.
#  isPartialPreview: Boolean
#
#  # The matching keyrune code for Keyrune image icons
#  keyruneCode: String
#
#  # The Magic Card Market set name
#  mcmName: String
#
#  # The Magic Card Market set ID
#  mcmId: Float
#
#  # Set code for the set as it appears on Magic: The Gathering Online.
#  mtgoCode: String
#
#  # Name of the set.
#  name: String
#
#  # The parent set code for set variations like promotions, guild kits, etc
#  parentCode: String
#
#  # Release date in ISO 8601 format for the set
#  releaseDate: String
#
#  # Group ID of the set on TCGPlayer
#  tcgplayerGroupId: Float
#
#  # Tokens available to the set. See the Card (Token) data model
#  tokens: [CardToken!]
#
#  # Total number of cards in the set, including promos and related supplemental products
#  totalSetSize: Float
#
#  # Translated set name by language. See the Translation data model
#  translations: Translations
#
#  # Expansion type of the set
#  type: String
#}

#type Card {
#  # A universal unique ID (v5) generated by MTGJSON. Each entry is unique
#  uuid: String!
#
#  # Name of the artist that illustrated the card art
#  artist: String
#
#  # The ASCII (Basic/128) code formatted card name with no special unicode characters
#  asciiName: String
#
#  # List of the card's available printing types
#  availability: [String!]
#
#  # Color of the card border
#  borderColor: String
#
#  # List of the colors found in manaCost, colorIndicator, and text
#  colorIdentity: [String!]
#
#  # List of all the colors in the color indicator (The symbol prefixed to a card's types)
#  colorIndicator: [String!]
#
#  # List of all colors in manaCost, colorIndicator. Some cards may not have a value, such as cards with 'Devoid' in its text
#  colors: [String!]
#
#  # The converted mana cost of the card
#  convertedManaCost: Float
#
#  # How many of this card exists in a relevant deck
#  count: Float
#
#  # An indicator for which duel deck the card is in
#  duelDeck: String
#
#  # Card rank on EDHRec
#  edhrecRank: Float
#
#  # The converted mana cost of the face of either half or part of the card
#  faceConvertedManaCost: Float
#
#  # Name on the face of the card
#  faceName: String
#
#  # Promotional card name printed above the true card name on special cards that has no game function
#  flavorName: String
#
#  # Italicized text found below the rules text that has no game function
#  flavorText: String
#  foreignData: [ForeignData!]
#
#  # The visual frame effect
#  frameEffects: [String!]
#
#  # Version of the card frame style
#  frameVersion: String
#
#  # Starting maximum hand size total modifier. A plus or minus character proceeds an integer
#  hand: String
#
#  # If the card marked by Wizards of the Coast for having sensitive content. Cards with this property may have missing or degraded properties and values
#  hasContentWarning: Boolean
#
#  # If the card be found in foil
#  hasFoil: Boolean
#
#  # If the card allows a value other than 4 copies in a deck
#  hasAlternativeDeckLimit: Boolean
#
#  # If the card can be found in non-foil
#  hasNonFoil: Boolean
#  identifiers: Identifier
#
#  # The card has some kind of alternative variation to its printed counterpart
#  isAlternative: Boolean
#
#  # If the card is in foil
#  isFoil: Boolean
#
#  # If the card has full artwork
#  isFullArt: Boolean
#
#  # If the card is only available in Magic: The Gathering Online
#  isOnlineOnly: Boolean
#
#  # If the card is oversized
#  isOversized: Boolean
#
#  # If the card is promotional
#  isPromo: Boolean
#
#  # If the card has been reprinted
#  isReprint: Boolean
#
#  # If the card is on the Magic: The Gathering Reserved List
#  isReserved: Boolean
#
#  # If the card is found in a booster pack
#  isStarter: Boolean
#
#  # If the card has a story spotlight
#  isStorySpotlight: Boolean
#
#  # If the card does not have a text box
#  isTextless: Boolean
#
#  # If this card is 'timeshifted', a feature from Time Spiral block
#  isTimeshifted: Boolean
#
#  # All keywords found on a card
#  keywords: [String!]
#
#  # Type of card layout
#  layout: String
#
#  # See the Leadership Skills data model
#  leadershipSkills: LeadershipSkills
#
#  # See the Legalities data model
#  legalities: Legalities
#
#  # Starting life total modifier. A plus or minus character preceeds an integer. Used only on Vanguard cards
#  life: String
#
#  # Planeswalker loyalty value
#  loyalty: String
#
#  # Mana cost of the card
#  manaCost: String
#
#  # Names of each face on the card. Card with multiple faces, like 'Split' and 'Meld' cards are given as delimiter. Example: Face 1 Name // Face 2 Name
#  name: String
#
#  # Number of the card. Can be prefixed or suffixed with a * or other characters for promo sets
#  number: String
#
#  # Text on the card as originally printed
#  originalText: String
#
#  # Type as originally printed. Includes any supertypes and subtypes
#  originalType: String
#
#  # List of UUID's of this card with counterparts, such as transformed or melded faces
#  otherFaceIds: [String!]
#
#  # Power of the card
#  power: String
#
#  # List of sets the card was printed in, in uppercase
#  printings: [String!]
#
#  # List of promotional types for a card
#  promoTypes: [String!]
#
#  # See the Purchase Urls data model
#  purchaseUrls: PurchaseUrls
#
#  # Card printing rarity
#  rarity: String
#
#  # See the Rulings data model
#  rulings: [Rulings!]
#
#  # The set code that the card is from
#  setCode: String
#
#  # Identifier of the card side. Used on cards with multiple faces
#  side: String
#
#  # List of card subtypes found after em-dash
#  subTypes: [String!]
#
#  # List of card supertypes found before em-dash
#  superTypes: [String!]
#
#  # Rules text of the card
#  text: String
#
#  # Toughness of the card
#  toughness: String
#
#  # Type of the card as visible, including any supertypes and subtypes
#  type: String
#
#  # List of all 'card types' of the card, including Un-sets and gameplay variants
#  types: [String!]
#
#  # List of UUID's of this card with alternate printings in the same set. Excludes Un-sets
#  variation: [String!]
#
#  # Name of the watermark on the card
#  watermark: String
#
#  # Associated decks that contain this card
#  decksContaining(includeSideboard: Boolean! = true): [Deck!]
#
#  # Associated Set
#  set: Set
#
#  # Associated Card Prices
#  latestPrice(
#    listType: ListType!
#    cardType: String!
#    provider: String!
#    format: String! = "paper"
#  ): CardPrices
#  prices: [CardPrices!]!
#}

#enum ListType {
#  RETAIL
#  BUYLIST
#}

#type DeckList {
#  id: String!
#
#  # Set code for the deck
#  code: String!
#
#  # File name for the deck. Combines the name and code fields to avoid namespace collisions.
#  fileName: String
#
#  # Name of the deck
#  name: String
#
#  # Release date in ISO 8601 format for the set. Returns null if the set was not formally released as a product.
#  releaseDate: String
#}

#type SetList {
#  id: String!
#
#  # Number of cards in the set. Will default to totalSetSize if not available. Note that Wizards sometimes prints extra cards beyond the set size into promos or supplemental products.
#  baseSetSize: Float
#
#  # Set code for the set
#  code: String
#
#  # If this set is only available in foil
#  isFoilOnly: Boolean
#
#  # If this set is only available in Magic: The Gathering Online
#  isOnlineOnly: Boolean
#
#  # If this set is only available in paper
#  isPaperOnly: Boolean
#
#  # Name of the set.
#  name: String
#
#  # Release date in ISO 8601 format for the set
#  releaseDate: String
#
#  # Total number of cards in the set, including promos and related supplemental products
#  totalSetSize: Float
#
#  # Expansion type of the set
#  type: String
#}

#type AtomicCard {
#  id: String!
#
#  # Name of the artist that illustrated the card art
#  artist: String
#
#  # List of the colors found in manaCost, colorIndicator, and text
#  colorIdentity: [String!]
#
#  # List of all the colors in the color indicator (The symbol prefixed to a card's types)
#  colorIndicator: [String!]
#
#  # List of all colors in manaCost, colorIndicator. Some cards may not have a value, such as cards with 'Devoid' in its text
#  colors: [String!]
#
#  # The converted mana cost of the card
#  convertedManaCost: Float
#
#  # Card rank on EDHRec
#  edhrecRank: Float
#
#  # The converted mana cost of the face of either half or part of the card
#  faceConvertedManaCost: Float
#
#  # Name on the face of the card
#  faceName: String
#  foreignData: [ForeignData!]
#
#  # Starting maximum hand size total modifier. A plus or minus character proceeds an integer
#  hand: String
#
#  # If the card allows a value other than 4 copies in a deck
#  hasAlternativeDeckLimit: Boolean
#
#  # If the card is on the Magic: The Gathering Reserved List
#  isReserved: Boolean
#
#  # Type of card layout
#  layout: String
#
#  # See the Leadership Skills data model
#  leadershipSkills: LeadershipSkills
#
#  # See the Legalities data model
#  legalities: Legalities
#
#  # Starting life total modifier. A plus or minus character preceeds an integer. Used only on Vanguard cards
#  life: String
#
#  # Planeswalker loyalty value
#  loyalty: String
#
#  # Mana cost of the card
#  manaCost: String
#
#  # Names of each face on the card. Card with multiple faces, like 'Split' and 'Meld' cards are given as delimiter. Example: Face 1 Name // Face 2 Name
#  name: String
#
#  # Power of the card
#  power: String
#
#  # List of sets the card was printed in, in uppercase
#  printings: [String!]
#
#  # See the Purchase Urls data model
#  purchaseUrls: PurchaseUrls
#
#  # See the Rulings data model
#  rulings: [Rulings!]
#
#  # Identifier of the card side. Used on cards with multiple faces
#  side: String
#
#  # List of card subtypes found after em-dash
#  subTypes: [String!]
#
#  # List of card supertypes found before em-dash
#  superTypes: [String!]
#
#  # Rules text of the card
#  text: String
#
#  # Toughness of the card
#  toughness: String
#
#  # Type of the card as visible, including any supertypes and subtypes
#  type: String
#
#  # List of all 'card types' of the card, including Un-sets and gameplay variants
#  types: [String!]
#
#  # A universal unique ID (v5) generated by MTGJSON. Each entry is unique
#  uuid: String!
#}
#
#type Meta {
#  id: String!
#
#  # ISO 8601 date of the MTGJSON build.
#  date: String
#
#  # SemVer specification of the MTGJSON build.
#  version: String
#
#  # The postgres MTGJSON database iteration
#  dbVersion: Float
#}

#type CardImage {
#  scryfallImageUrl: String
#  multiverseImageUrl: String
#}

input PaginationInput {
  take: Int = 15
  skip: Int = 0
}

input ListOrderInput {
  order: ListOrder!
}

enum ListOrder {
  ASC
  DESC
}

input CardImageGetInput {
  cardName: String
  scryfallId: String
  multiverseId: String
}

input CardImageFaceInput {
  face: CardFace! = FRONT
}

enum CardFace {
  FRONT
  BACK
}

input IdentifierCondition {
  operator: BaseOperator
  cardKingdomFoilId_eq: String
  cardKingdomFoilId_in: [String!]
  cardKingdomId_eq: String
  cardKingdomId_in: [String!]
  mcmId_eq: String
  mcmId_in: [String!]
  mcmMetaId_eq: String
  mcmMetaId_in: [String!]
  mtgArenaId_eq: String
  mtgArenaId_in: [String!]
  mtgoFoilId_eq: String
  mtgoFoilId_in: [String!]
  mtgoId_eq: String
  mtgoId_in: [String!]
  multiverseId_eq: String
  multiverseId_in: [String!]
  scryfallId_eq: String
  scryfallId_in: [String!]
  scryfallOracleId_eq: String
  scryfallOracleId_in: [String!]
  scryfallIllustrationId_eq: String
  scryfallIllustrationId_in: [String!]
  tcgplayerProductId_eq: String
  tcgplayerProductId_in: [String!]
}

enum BaseOperator {
  OR
  AND
}

input IdentifierFilter {
  operator: BaseOperator
  cardKingdomFoilId_eq: String
  cardKingdomFoilId_in: [String!]
  cardKingdomId_eq: String
  cardKingdomId_in: [String!]
  mcmId_eq: String
  mcmId_in: [String!]
  mcmMetaId_eq: String
  mcmMetaId_in: [String!]
  mtgArenaId_eq: String
  mtgArenaId_in: [String!]
  mtgoFoilId_eq: String
  mtgoFoilId_in: [String!]
  mtgoId_eq: String
  mtgoId_in: [String!]
  multiverseId_eq: String
  multiverseId_in: [String!]
  scryfallId_eq: String
  scryfallId_in: [String!]
  scryfallOracleId_eq: String
  scryfallOracleId_in: [String!]
  scryfallIllustrationId_eq: String
  scryfallIllustrationId_in: [String!]
  tcgplayerProductId_eq: String
  tcgplayerProductId_in: [String!]
  conditions: [IdentifierCondition!]
}

input FilterOnIdentifier {
  operator: BaseOperator
  cardKingdomFoilId_eq: String
  cardKingdomFoilId_in: [String!]
  cardKingdomId_eq: String
  cardKingdomId_in: [String!]
  mcmId_eq: String
  mcmId_in: [String!]
  mcmMetaId_eq: String
  mcmMetaId_in: [String!]
  mtgArenaId_eq: String
  mtgArenaId_in: [String!]
  mtgoFoilId_eq: String
  mtgoFoilId_in: [String!]
  mtgoId_eq: String
  mtgoId_in: [String!]
  multiverseId_eq: String
  multiverseId_in: [String!]
  scryfallId_eq: String
  scryfallId_in: [String!]
  scryfallOracleId_eq: String
  scryfallOracleId_in: [String!]
  scryfallIllustrationId_eq: String
  scryfallIllustrationId_in: [String!]
  tcgplayerProductId_eq: String
  tcgplayerProductId_in: [String!]
  conditions: [IdentifierCondition!]
}

input CardCondition {
  operator: BaseOperator
  uuid_eq: String
  uuid_in: [String!]
  artist_eq: String
  artist_in: [String!]
  artist_like: String
  asciiName_eq: String
  asciiName_in: [String!]
  asciiName_like: String
  name_eq: String
  name_in: [String!]
  name_like: String
  setCode_eq: String
  setCode_in: [String!]
  type_eq: String
  type_in: [String!]
  type_like: String
  type_ne: String
}

input CardFilter {
  operator: BaseOperator
  uuid_eq: String
  uuid_in: [String!]
  artist_eq: String
  artist_in: [String!]
  artist_like: String
  asciiName_eq: String
  asciiName_in: [String!]
  asciiName_like: String
  name_eq: String
  name_in: [String!]
  name_like: String
  setCode_eq: String
  setCode_in: [String!]
  type_eq: String
  type_in: [String!]
  type_like: String
  type_ne: String
  conditions: [CardCondition!]
}

input CardEntityFilterInput {
  operator: BaseOperator
  uuid_eq: String
  uuid_in: [String!]
  artist_eq: String
  artist_in: [String!]
  artist_like: String
  asciiName_eq: String
  asciiName_in: [String!]
  asciiName_like: String
  name_eq: String
  name_in: [String!]
  name_like: String
  setCode_eq: String
  setCode_in: [String!]
  type_eq: String
  type_in: [String!]
  type_like: String
  type_ne: String
  conditions: [CardCondition!]
  identifiers: FilterOnIdentifier
}

input DeckGetInput {
  name: String
  code: String
}

input PriceGetInput {
  uuid: String

  # Follows the format YYYY-MM-DD
  date: String

  # paper or mtgio
  format: String

  # foil or normal
  cardType: String

  # buylist or retail
  listType: String

  # The provider you want prices on
  provider: String
}

input SetGetInput {
  name: String
  code: String
  block: String
  keyruneCode: String
  mcmName: String
  mcmId: Float
  mtgoCode: String
  parentCode: String
  releaseDate: String
  type: String
}

type Query {
  status: Boolean!

  # Retrieve all cards with given criterias
  cards(
    order: ListOrderInput! = { order: ASC }
    page: PaginationInput! = { take: 15, skip: 0 }
    filter: CardEntityFilterInput!
  ): [Card!]!

  # Retrieve the image urls for a given scyfallId, multiverseId, or cardName
  cardImage(face: CardImageFaceInput, input: CardImageGetInput!): CardImage!

  # Retrieve a deck given a deck code or name
  decks(input: DeckGetInput!): Deck!
  metadata: Meta!

  # Retrieves all price history within given criterias
  prices(
    order: ListOrderInput!
    page: PaginationInput!
    input: PriceGetInput!
  ): [CardPrices!]!

  # Retrieves a given list of sets based on criteria
  sets(
    page: PaginationInput!
    order: ListOrderInput!
    input: SetGetInput!
  ): [Set!]!
}
